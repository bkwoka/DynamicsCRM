// <copyright file="PreValidatebk_studentDelete.cs" company="">
// Copyright (c) 2022 All Rights Reserved
// </copyright>
// <author></author>
// <date>1/26/2022 12:42:25 PM</date>
// <summary>Implements the PreValidatebk_studentDelete Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace CrmPackage.StudentPlugin
{

    /// <summary>
    /// PreValidatebk_studentDelete Plugin.
    /// </summary>    
    public class PreValidatebk_studentDelete: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreValidatebk_studentDelete"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreValidatebk_studentDelete(string unsecure, string secure)
            : base(typeof(PreValidatebk_studentDelete))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            var context = localContext.PluginExecutionContext;
            var service = localContext.OrganizationService;

            if (context.MessageName.ToLower() != "delete" && context.Stage != 10)
            {
                return;
            }


            EntityReference targetEntity = context.InputParameters["Target"] as EntityReference;

            QueryExpression qeStudentCourseEntity = new QueryExpression()
            {
                EntityName = "bk_studentcourse",
                ColumnSet = new ColumnSet("bk_studentcourse"),
                Criteria =
                {
                    Conditions =
                    {
                        new ConditionExpression("bk_student", ConditionOperator.Equal, targetEntity.Id)
                    }
                }
            };

            EntityCollection ec = service.RetrieveMultiple(qeStudentCourseEntity);

            if (ec.Entities.Count != 0)
            {
                throw new InvalidPluginExecutionException("Child record of Student found. Cannot delete this record");
            }
        }
    }
}
