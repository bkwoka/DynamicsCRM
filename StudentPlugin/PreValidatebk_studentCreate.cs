// <copyright file="PreValidatebk_studentCreate.cs" company="">
// Copyright (c) 2022 All Rights Reserved
// </copyright>
// <author></author>
// <date>1/26/2022 9:05:00 AM</date>
// <summary>Implements the PreValidatebk_studentCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

namespace CrmPackage.StudentPlugin
{
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using System;

    /// <summary>
    /// PreValidatebk_studentCreate Plugin.
    /// </summary>
    public class PreValidatebk_studentCreate : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreValidatebk_studentCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">The secure<see cref="string"/>.</param>
        public PreValidatebk_studentCreate(string unsecure, string secure)
            : base(typeof(PreValidatebk_studentCreate))
        {
        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The localContext<see cref="LocalPluginContext"/>.</param>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            var context = localContext.PluginExecutionContext;

            if (context.MessageName.ToLower() != "create" && context.Stage != 10)
            {
                return;
            }

            string autoNumber = string.Empty;
            string prefix = string.Empty;
            string suffix = string.Empty;
            string separator = string.Empty;
            string currentNumber = string.Empty;
            string year = string.Empty;
            string month = string.Empty;
            string day = string.Empty;

            DateTime today = DateTime.Today;
            year = today.Year.ToString();
            month = today.Month.ToString("00");
            day = today.Day.ToString("00");

            QueryExpression qe = new QueryExpression()
            {
                EntityName = "bk_autonumberconfiguration",
                ColumnSet = new ColumnSet("bk_name", "bk_prefix", "bk_suffix", "bk_separator", "bk_currentnumber")
            };
            qe.Criteria.AddCondition("bk_name", ConditionOperator.Equal, "PL");

            EntityCollection entityCollection = localContext.OrganizationService.RetrieveMultiple(qe);

            if (entityCollection.Entities.Count != 0)
            {
                Entity studentAutoNumber = entityCollection.Entities[0];

                prefix = studentAutoNumber["bk_prefix"].ToString();
                suffix = studentAutoNumber["bk_suffix"].ToString();
                separator = studentAutoNumber["bk_separator"].ToString();
                currentNumber = studentAutoNumber["bk_currentnumber"].ToString();
                // Increase number of AutoNumberConfiguration Entity
                currentNumber = (int.Parse(currentNumber) + 1).ToString("000000");
                autoNumber = $"{prefix}{separator}{year}{month}{day}{separator}{suffix}{separator}{currentNumber}";

                QueryExpression qeStudent = new QueryExpression()
                {
                    EntityName = "bk_student",
                    ColumnSet = new ColumnSet("bk_name"),
                    Criteria =
                    {
                        Conditions =
                        {
                            new ConditionExpression("bk_name", ConditionOperator.Equal, autoNumber)
                        }
                    }
                };

                EntityCollection studentEntityCollection = localContext.OrganizationService.RetrieveMultiple(qeStudent);

                if (studentEntityCollection.Entities.Count > 0)
                {
                    throw new InvalidPluginExecutionException($"Duplicate student found with student Id : {autoNumber}");
                }
            }
        }
    }
}
