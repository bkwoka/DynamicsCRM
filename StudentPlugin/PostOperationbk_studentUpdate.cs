// <copyright file="PostOperationbk_studentUpdate.cs" company="">
// Copyright (c) 2022 All Rights Reserved
// </copyright>
// <author></author>
// <date>1/27/2022 9:50:04 AM</date>
// <summary>Implements the PostOperationbk_studentUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

namespace CrmPackage.StudentPlugin
{
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;

    /// <summary>
    /// PostOperationbk_studentUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// bk_addressline1,bk_addressline2,bk_addressline3,bk_city,bk_contactnumber,bk_country,bk_courseappliedfor,bk_coursefee,bk_coursefee_base,bk_cycle,modifiedon,createdon,overriddencreatedon,bk_dateofbirth,bk_email,bk_firstname,bk_gender,bk_lastname,bk_levelappliedfor,bk_middlename,bk_name,bk_nextdateofbirth,importsequencenumber,timezoneruleversionnumber,bk_postalcode,statuscode,bk_semester,statecode,bk_state,bk_stream,bk_studentid,bk_title,bk_totalfee,bk_totalfee_base,bk_universityfee,bk_universityfee_base,createdonbehalfby,createdby,owninguser,transactioncurrencyid,ownerid,owningteam,modifiedby,modifiedonbehalfby.
    /// </summary>
    public class PostOperationbk_studentUpdate : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationbk_studentUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">The secure<see cref="string"/>.</param>
        public PostOperationbk_studentUpdate(string unsecure, string secure)
            : base(typeof(PostOperationbk_studentUpdate))
        {
        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The localContext<see cref="LocalPluginContext"/>.</param>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            if (localContext.PluginExecutionContext.MessageName.ToLower() != "update" && localContext.PluginExecutionContext.Stage != 40)
            {
                return;
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;

            Entity preImage = context.PreEntityImages["preImage"] as Entity;
            Entity postImage = context.PostEntityImages["postImage"] as Entity;

            if (preImage == null || postImage == null)
            {
                return;
            }

            // return if not contains (!)
            if (!(preImage.Contains("bk_semester") && postImage.Contains("bk_semester")))
            {
                return;
            }

            if (((OptionSetValue)preImage["bk_semester"]).Value == (int)Constants.Constants.Semester.Smester1
                    && ((OptionSetValue)postImage["bk_semester"]).Value == (int)Constants.Constants.Semester.Smester2)
            {
                Entity updateStudent = null;
                int cycle = ((OptionSetValue)preImage["bk_cycle"]).Value;
                switch (cycle)
                {
                    case (int)Constants.Constants.Cycle.Pcycle:
                        updateStudent = new Entity("bk_student");
                        updateStudent.Id = preImage.Id;
                        updateStudent["bk_cycle"] = new OptionSetValue((int)Constants.Constants.Cycle.Ccycle);
                        service.Update(updateStudent);
                        updateStudentCourse(localContext, preImage);
                        createStudentCourse(localContext, preImage, false);
                        return;

                    case (int)Constants.Constants.Cycle.Ccycle:
                        updateStudent = new Entity("bk_student");
                        updateStudent.Id = preImage.Id;
                        updateStudent["bk_cycle"] = new OptionSetValue((int)Constants.Constants.Cycle.Pcycle);
                        service.Update(updateStudent);
                        updateStudentCourse(localContext, preImage);
                        createStudentCourse(localContext, preImage, true);
                        return;

                }
            }
        }

        /// <summary>
        /// The updateStudentCourse.
        /// </summary>
        /// <param name="localContext">The localContext<see cref="LocalPluginContext"/>.</param>
        /// <param name="studentEntity">The studentEntity<see cref="Entity"/>.</param>
        private void updateStudentCourse(LocalPluginContext localContext, Entity studentEntity)
        {
            QueryExpression qeStudentCourse = new QueryExpression()
            {
                EntityName = "bk_studentcourse",
                ColumnSet = new ColumnSet("bk_studentcourse"),
                Criteria =
                 {
                    Conditions =
                    {
                        new ConditionExpression("bk_student", ConditionOperator.Equal, studentEntity.Id),
                        new ConditionExpression("bk_issubjectcompleted", ConditionOperator.Equal, false)
                    }
                }
            };

            EntityCollection ecStudentCourse = localContext.OrganizationService.RetrieveMultiple(qeStudentCourse);
            if (ecStudentCourse.Entities.Count > 0)
            {
                foreach (var entity in ecStudentCourse.Entities)
                {
                    entity["bk_issubjectcompleted"] = true;
                    localContext.OrganizationService.Update(entity);
                }
            }
        }

        /// <summary>
        /// The createStudentCourse.
        /// </summary>
        /// <param name="localContext">The localContext<see cref="LocalPluginContext"/>.</param>
        /// <param name="studentEntity">The studentEntity<see cref="Entity"/>.</param>
        /// <param name="isPcycle">The isPcycle<see cref="bool"/>.</param>
        private void createStudentCourse(LocalPluginContext localContext, Entity studentEntity, bool isPcycle)
        {
            QueryExpression qeSubject = new QueryExpression()
            {
                EntityName = "bk_subject",
                ColumnSet = new ColumnSet("bk_name"),
            };
            qeSubject.Criteria.AddCondition("bk_semester", ConditionOperator.Equal, (int)Constants.Constants.Semester.Smester2);
            if (isPcycle)
            {
                qeSubject.Criteria.AddCondition("bk_cycle", ConditionOperator.Equal, (int)Constants.Constants.Cycle.Pcycle);
            }
            else
            {
                qeSubject.Criteria.AddCondition("bk_cycle", ConditionOperator.Equal, (int)Constants.Constants.Cycle.Ccycle);
            }

            EntityCollection ecSubject = localContext.OrganizationService.RetrieveMultiple(qeSubject);

            if (ecSubject.Entities.Count > 0)
            {
                foreach (var entity in ecSubject.Entities)
                {
                    Entity createStudentCourse = new Entity("bk_studentcourse");
                    createStudentCourse["bk_studentcourse"] = $"{studentEntity["bk_name"]} - {entity["bk_name"]}";
                    createStudentCourse["bk_student"] = new EntityReference("bk_student", studentEntity.Id);
                    createStudentCourse["bk_subject"] = new EntityReference("bk_subject", entity.Id);
                    localContext.OrganizationService.Create(createStudentCourse);

                }
            }
        }
    }
}
