// <copyright file="PostOperationbk_studentCreate.cs" company="">
// Copyright (c) 2022 All Rights Reserved
// </copyright>
// <author></author>
// <date>1/24/2022 12:55:48 PM</date>
// <summary>Implements the PostOperationbk_studentCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

namespace CrmPackage.StudentPlugin
{
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using System;

    /// <summary>
    /// PostOperationbk_studentCreate Plugin.
    /// </summary>
    public class PostOperationbk_studentCreate : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationbk_studentCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">The secure<see cref="string"/>.</param>
        public PostOperationbk_studentCreate(string unsecure, string secure)
            : base(typeof(PostOperationbk_studentCreate))
        {
        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The localContext<see cref="LocalPluginContext"/>.</param>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            if (localContext.PluginExecutionContext.Stage != 40 && localContext.PluginExecutionContext.MessageName.ToLower() != "create")
            {
                return;
            }

            Guid targetEntityId = ((Entity)localContext.PluginExecutionContext.InputParameters["Target"]).Id;
            Entity targetEntity = localContext.OrganizationService.Retrieve("bk_student",((Entity)localContext.PluginExecutionContext.InputParameters["Target"]).Id,
                new ColumnSet("bk_name", "bk_cycle"));

            if (targetEntity != null)
            {
                int cycle = ((OptionSetValue)targetEntity["bk_cycle"]).Value;
                switch (cycle)
                {
                    case (int)Constants.Constants.Cycle.Pcycle:
                        {
                            CreateStudentCourse(localContext, targetEntityId, targetEntity, true);
                            break;
                        }
                    case (int)Constants.Constants.Cycle.Ccycle:
                        {
                            CreateStudentCourse(localContext, targetEntityId, targetEntity, false);
                            break;
                        }

                }
            }
        }

        /// <summary>
        /// The CreateStudentCourse.
        /// </summary>
        /// <param name="localContext">The localContext<see cref="LocalPluginContext"/>.</param>
        /// <param name="targetEntityId">The targetEntityId<see cref="Guid"/>.</param>
        /// <param name="targetEntity">The targetEntity<see cref="Entity"/>.</param>
        /// <param name="isPCycle">The isPCycle<see cref="bool"/>.</param>
        private void CreateStudentCourse(LocalPluginContext localContext, Guid targetEntityId, Entity targetEntity, bool isPCycle)
        {
            localContext.TracingService.Trace(targetEntityId.ToString());
            QueryExpression querySubject = new QueryExpression()
            {
                EntityName = "bk_subject",
                ColumnSet = new ColumnSet("bk_name")
            };

            querySubject.Criteria.AddCondition("bk_semester", ConditionOperator.Equal, (int)Constants.Constants.Semester.Smester1); //todo remove hardCode semester 1?

            if (isPCycle)
            {
                querySubject.Criteria.AddCondition("bk_cycle", ConditionOperator.In, (int)Constants.Constants.Cycle.Pcycle, (int)Constants.Constants.Cycle.Both);
            }
            else
            {
                querySubject.Criteria.AddCondition("bk_cycle", ConditionOperator.In, (int)Constants.Constants.Cycle.Ccycle, (int)Constants.Constants.Cycle.Both);
            }

            EntityCollection ecSubject = localContext.OrganizationService.RetrieveMultiple(querySubject);

            if (ecSubject.Entities.Count != 0)
            {
                foreach (Entity entity in ecSubject.Entities)
                {
                    Entity createStudentCourse = new Entity("bk_studentcourse");
                    createStudentCourse["bk_subject"] = new EntityReference("bk_subject", entity.Id);
                    createStudentCourse["bk_student"] = new EntityReference("bk_student", targetEntityId);
                    createStudentCourse["bk_studentcourse"] =
                        targetEntity["bk_name"] + " - " + entity["bk_name"];
                    localContext.OrganizationService.Create(createStudentCourse);


                }
            }
        }
    }
}
