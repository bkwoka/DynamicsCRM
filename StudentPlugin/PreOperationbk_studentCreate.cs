// <copyright file="PreOperationbk_studentCreate.cs" company="">
// Copyright (c) 2022 All Rights Reserved
// </copyright>
// <author></author>
// <date>1/25/2022 10:17:22 AM</date>
// <summary>Implements the PreOperationbk_studentCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

namespace CrmPackage.StudentPlugin
{
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using System;

    /// <summary>
    /// PreOperationbk_studentCreate Plugin.
    /// </summary>
    public class PreOperationbk_studentCreate : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreOperationbk_studentCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">The secure<see cref="string"/>.</param>
        public PreOperationbk_studentCreate(string unsecure, string secure)
            : base(typeof(PreOperationbk_studentCreate))
        {
        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The localContext<see cref="LocalPluginContext"/>.</param>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            Entity targetEntity = localContext.PluginExecutionContext.InputParameters["Target"] as Entity;


            if (targetEntity.LogicalName.ToLower() != "bk_student")
            {
                return;
            }

            targetEntity["bk_name"] = getAutoNumber(localContext);
        }

        /// <summary>
        /// The getAutoNumber.
        /// </summary>
        /// <param name="localContext">The localContext<see cref="LocalPluginContext"/>.</param>
        /// <returns>The <see cref="string"/>.</returns>
        private string getAutoNumber(LocalPluginContext localContext)
        {

            Entity updateAutoNumberConfigEntity = new Entity("bk_autonumberconfiguration");

            string autoNumber = string.Empty;

            DateTime today = DateTime.Now;
            var year = today.Year.ToString();
            var month = today.Month.ToString("00");
            var day = today.Day.ToString("00");

            QueryExpression autoNumberConfiguration = new QueryExpression()
            {
                EntityName = "bk_autonumberconfiguration",
                ColumnSet = new ColumnSet("bk_prefix", "bk_suffix", "bk_separator", "bk_currentnumber", "bk_name")
            };
            EntityCollection entityCollection = localContext.OrganizationService.RetrieveMultiple(autoNumberConfiguration);

            if (entityCollection.Entities.Count == 0)
            {
                throw new InvalidPluginExecutionException("Missing AutoNumberConfiguration");
            }

            foreach (var entity in entityCollection.Entities)
            {
                if (entity.Attributes["bk_name"].ToString().ToLower() == "pl")
                {
                    var prefix = entity.GetAttributeValue<string>("bk_prefix");
                    var suffix = entity.GetAttributeValue<string>("bk_suffix");
                    var separator = entity.GetAttributeValue<string>("bk_separator");
                    var currentNum = entity.GetAttributeValue<string>("bk_currentnumber");


                    // Increase number of AutoNumberConfiguration Entity
                    currentNum = (int.Parse(currentNum) + 1).ToString("000000");

                    autoNumber = $"{prefix}{separator}{year}{month}{day}{separator}{suffix}{separator}{currentNum}";
                    updateAutoNumberConfigEntity.Id = entity.Id;
                    updateAutoNumberConfigEntity.Attributes["bk_currentnumber"] = currentNum;
                    localContext.OrganizationService.Update(updateAutoNumberConfigEntity);
                    break;
                }
            }

            return autoNumber;
        }
    }
}
